#!/usr/bin/env python3

# This file is part of the Python aiocoap library project.
#
# Copyright (c) 2012-2014 Maciej Wasilak <http://sixpinetrees.blogspot.com/>,
#               2013-2014 Christian Ams√ºss <c.amsuess@energyharvesting.at>
#
# txThings is free software, this file is published under the MIT license as
# described in the accompanying LICENSE file.

"""coap-forward-proxy is a plain CoAP proxy that forwards incoming requests."""

import sys
import logging
import asyncio
import copy

import aiocoap

class ProxiedResource():
    def __init__(self, context):
        self.context = context

    observable = False

    @asyncio.coroutine
    def render(self, request):
        # FIXME i'd rather let the application do with the message whatever it
        # wants. everything the responder needs of the request should be
        # extracted beforehand.
        request = copy.copy(request)

        request.mid = None
        request.remote = None
        request.token = None

        if request.opt.proxy_scheme != 'coap':
            return Message(code=aiocoap.BAD_OPTION, payload=b"This is only a CoAP proxy (set uri-scheme to coap)")

        unsafe_options = [o.value for o in request.opt.option_list() if o.number.is_unsafe() and o.number not in (aiocoap.numbers.OptionNumber.PROXY_SCHEME, aiocoap.numbers.OptionNumber.URI_HOST)]
        if unsafe_options:
            logging.warn("Ignoring unsafe options %r"%unsafe_options)

        response = yield from self.context.request(request).response

        response.mid = None
        response.remote = None
        response.token = None

        return response

class ProxySite():
    def get_resource_for(self, request):
        return ProxiedResource(self.context)

@asyncio.coroutine
def main(args):
    proxysite = ProxySite()

    proxy_context = yield from aiocoap.Context.create_server_context(proxysite)
    outgoing_context = yield from aiocoap.Context.create_client_context()

    proxysite.context = outgoing_context

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main(sys.argv[1:]))
        logging.info("proxy ready")
        loop.run_forever()
    except KeyboardInterrupt:
        sys.exit(3)
