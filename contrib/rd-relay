#!/usr/bin/env python3

# This file is part of the Python aiocoap library project.
#
# Copyright (c) 2012-2014 Maciej Wasilak <http://sixpinetrees.blogspot.com/>,
#               2013-2014 Christian Ams√ºss <c.amsuess@energyharvesting.at>
#
# aiocoap is free software, this file is published under the MIT license as
# described in the accompanying LICENSE file.

"""A minimal server that can be placed where an RD might be auto-discovered,
and announces the resources on a full resource directory.

This is "minimal" because it only does two things:

    * Let clients query for Resource Directories from an explicitly configured
      list of links
    * Accept simple registrations and forward them as simple registrations to a
      configured RD. This expects that the actual RD accepts con= on a simple
      registration, which will probably be disallowed.

It does not (but could be extended to) discover RDs or their resources on its
own, or allow the list of servers to be updated remotely.

While basically usable (eg. on 6LoWPAN border routers), it is more considered a
demo; the devices on which such functionality is expected to run might easily
prefer a more constrained implementation."""

import argparse
import logging
from urllib.parse import urljoin

from aiocoap import Message, POST, CHANGED, CONTENT
from aiocoap.error import NotFound, MethodNotAllowed, AnonymousHost, BadRequest
from aiocoap.resource import Resource, PathCapable, link_format_to_message
from aiocoap.cli.common import (add_server_arguments,
        server_context_from_arguments)
from aiocoap.util.cli import AsyncCLIDaemon
from aiocoap.util.linkformat import LinkFormat, Link

class RDRelaySite(Resource, PathCapable):
    def __init__(self, opts):
        links = []
        # argparse is not really great with dots in names; i'd prefer direct
        # subscript index or any non-name characters to be turned into
        # underscores
        opts = vars(opts)
        for rt in ('core.rd', 'core.rd-lookup-ep', 'core.rd-lookup-res'):
            rt_underscored = rt.replace('-', '_')
            if opts[rt_underscored] is not None:
                links.append(Link(opts[rt_underscored], rt=rt, rel="x-see-also"))
        self.links = LinkFormat(links)

        if 'core.rd' in opts:
            self.forward = opts['core.rd']
        else:
            self.forward = None

    async def render_get(self, request):
        if request.opt.uri_path != ('.well-known', 'core'):
            raise NotFound
        return link_format_to_message(request, self.links)

    async def render_post(self, request):
        if request.opt.uri_path != ('.well-known', 'core'):
            raise NotFound

        if self.forward is None:
            raise MethodNotAllowed

        try:
            client_uri = request.remote.uri
        except AnonymousHost:
            raise BadRequest("explicit base required")
        # FIXME: deduplicate with aiocoap.cli.rd.SimpleRegistrationWKC
        args = request.opt.uri_query
        if any (a.startswith('base=') for a in args):
            raise BadRequest("base is not allowed in simple registrations")
        # FIXME: Could do some formal checks on those, like whether the lifetime is numeric

        async def work():
            get_wkc = Message(code=GET, uri=urijoin(client_uri, '/.well-known/core'))
            response = await self.context.request(get_wkc).response_raising

            if response.code != CONTENT:
                raise RuntimeError("Odd response code from %s" % client_uri)

            fwd = Message(code=POST,
                    uri=self.forward,
                    content_format=response.content_format,
                    payload=response.payload,
                    )
            fwd.opt.uri_query = args + ['base=%s' % client_uri]
            await self.context.request(fwd).response

        asyncio.ensure_future(work())

        return Message(code=CHANGED)

class RDRelayProgram(AsyncCLIDaemon):
    async def start(self):
        p = argparse.ArgumentParser()
        p.add_argument("-v", "--verbose", help="Be more verbose (repeat to debug)", action='count', dest="verbosity", default=0)
        p.add_argument("--core.rd", help="Link to the RD resource")
        p.add_argument("--core.rd-lookup-ep", help="Link to the endpoint lookup resource")
        p.add_argument("--core.rd-lookup-res", help="Link to the resource lookup resource")

        add_server_arguments(p)

        opts = p.parse_args()

        if opts.verbosity > 1:
            logging.basicConfig(level=logging.DEBUG)
        elif opts.verbosity == 1:
            logging.basicConfig(level=logging.INFO)
        else:
            logging.basicConfig(level=logging.WARNING)

        site = RDRelaySite(opts)

        self.context = await server_context_from_arguments(site, opts)
        site.context = self.context

    async def shutdown(self):
        await self.context.shutdown()

if __name__ == "__main__":
    RDRelayProgram.sync_main()
