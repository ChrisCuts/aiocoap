#!/usr/bin/env python3

# This file is part of the Python aiocoap library project.
#
# Copyright (c) 2012-2014 Maciej Wasilak <http://sixpinetrees.blogspot.com/>,
#               2013-2014 Christian Ams√ºss <c.amsuess@energyharvesting.at>
#
# aiocoap is free software, this file is published under the MIT license as
# described in the accompanying LICENSE file.

"""A server suitable for running the OSCOAP plug test series against it

See https://github.com/EricssonResearch/OSCOAP for the test suite
description."""

import sys
import asyncio
import logging
import argparse

import aiocoap
import aiocoap.oscoap as oscoap
import aiocoap.error as error
from aiocoap.util.cli import AsyncCLIDaemon
import aiocoap.resource as resource

from plugtest_common import *

class PleaseUseOscoap(error.ConstructionRenderableError):
    code = aiocoap.UNAUTHORIZED
    message = "This is an OSCOAP plugtest, please use option %d"%aiocoap.numbers.optionnumbers.OptionNumber.OBJECT_SECURITY


class HelloResource(resource.Resource):
    def render_get(self, request):
        testno_mode = {('first=1',): 2, ('second=2',): 3}.get(request.opt.uri_query, 1)

        additional_verify("Accept as expected", 0 if testno_mode == 3 else None, request.opt.accept)

        etag = b"\x2b" if testno_mode in (2, 3) else None
        max_age = 5 if testno_mode == 3 else None
        return aiocoap.Message(content_format=0, payload="Hello World!".encode('ascii'), etag=etag, max_age=max_age)

class CounterResource(resource.Resource):
    def render_post(self, request):
        additional_verify("Content-Format as expeted", 0, request.opt.content_format)
        additional_verify("Payload as expected", b"\x4a"*4, request.payload)
        return aiocoap.Message(code=aiocoap.CHANGED, location_path=('counter',), location_query=('first=1', 'second=2'))

    def render_put(self, request):
        additional_verify("Content-Format as expeted", 0, request.opt.content_format)
        additional_verify("If-Match as expected", (b"\x5b\x5b",), request.opt.if_match)
        additional_verify("Payload as expected", b"\x5a"*4, request.payload)
        return aiocoap.Message(code=aiocoap.CHANGED)

    def render_delete(self, request):
        return aiocoap.Message(code=aiocoap.DELETED)

class SeqnoManager(resource.Resource):
    def __init__(self, contexts):
        self.contexts = contexts

    def render_get(self, request):
        the_context, = self.contexts.values()

        # this direct access is technically outside the interface for a
        # SecurityContext, but then again, there isn't one yet
        text = """Next sequence number I will use: %d\n""" % the_context.my_sequence_number
        text += """I've seen all sequence numbers up to including %d%s.""" % (
                the_context.other_replay_window.seen[0],
                ", and also %s" % the_context.other_replay_window.seen[1:] if len(the_context.other_replay_window.seen) > 1 else ""
                )
        return aiocoap.Message(payload=text.encode('utf-8'), content_format=0)

    def render_put(self, request):
        try:
            number = int(request.payload.decode('utf8'))
        except (ValueError, UnicodeDecodeError):
            raise aiocoap.error.BadRequest("Only numeric values are accepted.")

        new_context = get_security_context(number, 'recipient')
        self.contexts[new_context.cid] = new_context

        return aiocoap.Message(code=aiocoap.CHANGED)

class PlugtestSite(resource.Site):
    def __init__(self, *, contexts=[]):
        super().__init__()

        # by now, the testno here should only be used to initialize the sequence numbers
        regular_context = get_security_context(1, 'recipient')

        self.contexts = {c.cid: c for c in [regular_context, ]}

        self.add_resource(('.well-known', 'core'), resource.WKCResource(self.get_resources_as_linkheader))
        self.add_resource(('change-tid',), HelloResource())
        self.add_resource(('helloworld',), HelloResource())
        self.add_resource(('counter',), CounterResource())
        self.add_resource(('sequence-numbers',), SeqnoManager(self.contexts))

    whitelist = (
            ('.well-known', 'core'),
            ('sequence-numbers',)
            )

    # Most of this is copied from server-oscoap, and needs yet to move into the library
    async def render(self, request):
        try:
            cid, sid = oscoap.verify_start(request)
        except oscoap.NotAProtectedMessage:
            if request.opt.uri_path in self.whitelist:
                return await super().render(request)
            else:
                raise PleaseUseOscoap()

        # right now we'll rely on the sid to match, especially as it's not sent
        # unconditionally anyway
        try:
            sc = self.contexts[cid]
        except KeyError:
            raise PleaseUseOscoap() # may we disclose the reason?

        try:
            unprotected, seqno = sc.unprotect(request)
        except oscoap.ProtectionInvalid as e:
            print("Unprotect failed (%s)"%(e,))
            # hack explanation: there is no implementation of a "no response"
            # response in aiocoap yet. the string here is not a sentinel but an
            # exploitation of aiocoap not handling the type error of not having
            # a message early enough to send a 5.00 error instead; it just
            # fails to reply at all.

            # this also bypasses .response_callback (which might
            # auto-increment), which is a good thing because retransmissions
            # would send the auto-incrementor off and away
            return "NO RESPONSE"

        print("Unprotected request:", unprotected)

        if unprotected.opt.uri_path == ('change-tid',):
            # it seems this is the easiest way to tamper with the Tid as
            # requested for test 16.
            seqno = seqno + b'?'

        # FIXME the render doesn't provide a way to provide context in the
        # sense of "who is the user"; obviously, the render interface needs
        # rework
        try:
            response = await super().render(unprotected)
        except error.RenderableError as err:
            response = err.to_message()
        except Exception as rr:
            response = aiocoap.Message(code=aiocoap.INTERNAL_SERVER_ERROR)
            self.log.error("An exception occurred while rendering a protected resource: %r"%err)
            self.log.exception(err)

        if response.code is None:
            # FIXME: this duplicates the default setting in aiocoap.protocol
            response.code = aiocoap.CONTENT

        print("Unprotected response:", response)

        protected_response, _ = sc.protect(response, seqno)

        # FIXME who should trigger this?
        sc._store()

        return protected_response

class PlugtestServerProgram(AsyncCLIDaemon):
    async def start(self):
        logging.root.setLevel(logging.WARNING)

        p = argparse.ArgumentParser(description="Server for the OSCOAP plug test. Requires a test number to be present.")
        opts = p.parse_args()

        self.context = await aiocoap.Context.create_server_context(PlugtestSite())

        print("Plugtest server ready.")
        sys.stdout.flush() # the unit tests might wait abundantly long for this otherwise

    async def shutdown(self):
        await self.context.shutdown()

if __name__ == "__main__":
    PlugtestServerProgram.sync_main()
